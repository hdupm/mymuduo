#pragma once

/*
用户使用muduo编写服务器程序
*/
#include "EventLoop.h"
#include "Acceptor.h"
#include "InetAddress.h"
#include "noncopyable.h"
#include "EventLoopThreadPool.h"
#include "Callbacks.h"
#include "TcpConnection.h"
#include "Buffer.h"
#include <atomic>
#include <functional>
#include <memory>
#include <unordered_map> 
//对外服务器编程使用的类 自己写chatserver只需包含TcpServer即可
class TcpServer:noncopyable
{
public:
    using ThreadInitCallback=std::function<void(EventLoop*)>;
    enum Option
    {
        kNoReusePort,
        kReusePort,
    };

    TcpServer(EventLoop *loop,const InetAddress &listenAddr,const std::string &nameArg,Option option=kNoReusePort);
    ~TcpServer();
    void setThreadInitcallback(const ThreadInitCallback &cb) {threadInitCallback_=cb;}
    void setConnectionCallback(const ConnectionCallback &cb) {connectionCallback_=cb;}
    void setMessageCallback(const MessageCallback &cb) {messageCallback_=cb;}
    void setWriteCompleteCallback(const WriteCompleteCallback &cb) {writeCompleteCallback_=cb;}

    //设置底层 subloop的个数
    void setThreadNum(int numThreads);

    //开启服务器监听
    void start();

private:
    void newConnection(int sockfd,const InetAddress &peerAddr);
    void removeConnection(const TcpConnectionPtr &conn);
    void removeConnectionInLoop(const TcpConnectionPtr &conn);

    using ConnectionMap=std::unordered_map<std::string,TcpConnectionPtr>;

    EventLoop *loop_;//baseLoop 用户定义的loop 即mainloop 主要运行acceptor
    const std::string ipPort_;//保存服务器ip端口号
    const std::string name_;
    std::unique_ptr<Acceptor> acceptor_; //智能指针托管资源 运行在mainLoop，任务就是监听新连接事件

    std::shared_ptr<EventLoopThreadPool> threadPool_;//one loop per thread
    //用户自定义的回调函数 用户传给tcpserver再传给eventloop

    ConnectionCallback connectionCallback_;//有新连接时的回调
    MessageCallback messageCallback_;//有读写消息时的回调
    WriteCompleteCallback writeCompleteCallback_;//消息发送完成以后的回调

    ThreadInitCallback threadInitCallback_;//loop线程初始化的回调
    std::atomic_int started_;
    int nextConnId_;
    ConnectionMap connections_;//保存所有的连接
    
};